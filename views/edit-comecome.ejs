<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8" />
    <title>収入編集</title>
    <link rel="stylesheet" href="/styles-editc.css"> <style>
      .map-container { position: relative; margin: 1em 0; }
      .map { height: 300px; width: 100%; border: 1px solid #ccc; }
      .pac-input { width: 90%; padding: 8px; font-size: 14px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px; }
      .current-photo { max-width: 300px; max-height: 300px; display: block; margin-top: 10px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <header>
      <h1>収入編集</h1>
      <nav>
        <% if (user) { %>
            <a href="/dashboard">カレンダーに戻る</a> |
            <a href="/logout">ログアウト</a>
        <% } %>
      </nav>
    </header>
    <main>
      <form action="/edit-comecome/<%= comecome.id %>" method="POST" enctype="multipart/form-data">
        <br>
        <label for="date">日付:</label>
        <input type="date" name="date" id="date" value="<%= comecome.date %>" required>
        <br>
        <label for="type">種類:</label>
        <select name="type" id="type" required>
            <option value="お小遣い" <%= comecome.type === 'お小遣い' ? 'selected' : '' %>>お小遣い</option>
            <option value="バイト" <%= comecome.type === 'バイト' ? 'selected' : '' %>>バイト</option>
            <option value="収入" <%= comecome.type === '収入' ? 'selected' : '' %>>その他収入</option>
        </select>
        <br>
        <label for="amount">金額:</label>
        <input type="number" name="amount" placeholder="金額を入力" step="1" value="<%= comecome.amount %>" required>
        <br>
        <label for="description">説明:</label>
        <input type="text" name="description" placeholder="説明（任意）" value="<%= comecome.description %>">
        <br>

        <% if (comecome.photo_filename) { %>
          <div>
            <label>現在の写真:</label>
            <img src="/uploads/<%= comecome.photo_filename %>" alt="現在の写真" class="current-photo">
          </div>
          <br>
        <% } %>

        <div>
          <label for="transactionPhoto">写真を変更:</label>
          <input type="file" id="transactionPhoto" name="transactionPhoto" accept="image/*">
          <small>（新しい写真を選択すると、現在の写真は上書きされます）</small>
        </div>
        <br>
        
        <label>場所:</label>
        <div class="map-container">
          <input id="pac-input" class="pac-input" type="text" placeholder="新しい場所を検索" />
          <div id="map" class="map"></div>
        </div>
        <input type="hidden" id="latitude" name="latitude" value="<%= comecome.latitude || '' %>">
        <input type="hidden" id="longitude" name="longitude" value="<%= comecome.longitude || '' %>">
        <input type="hidden" id="location_name" name="locationName" value="<%= comecome.location_name || '' %>">
        
        <br>
        <button type="submit">更新</button>
      </form>
    </main>

    <script>
      function initMap() {
        // EJSから既存の位置情報を取得
        const initialLat = parseFloat(document.getElementById('latitude').value) || 35.681236;
        const initialLng = parseFloat(document.getElementById('longitude').value) || 139.767125;
        const initialLocation = { lat: initialLat, lng: initialLng };

        const mapElement = document.getElementById('map');
        const inputElement = document.getElementById('pac-input');
        const latElement = document.getElementById('latitude');
        const lngElement = document.getElementById('longitude');
        const nameElement = document.getElementById('location_name');

        const map = new google.maps.Map(mapElement, {
          center: initialLocation,
          zoom: 15,
        });

        const searchBox = new google.maps.places.SearchBox(inputElement);
        let marker = null;

        // ★ 既存の場所があれば、最初にマーカーを立てる
        if (document.getElementById('latitude').value) {
            marker = new google.maps.Marker({
                position: initialLocation,
                map: map,
            });
        }

        map.addListener("bounds_changed", () => searchBox.setBounds(map.getBounds()));
        searchBox.addListener("places_changed", () => {
          const place = searchBox.getPlaces()[0];
          if (!place || !place.geometry) return;
          updateLocation(place.geometry.location, place.name);
          map.setCenter(place.geometry.location);
          map.setZoom(17);
        });
        
        map.addListener("click", (e) => updateLocation(e.latLng, "選択した地点"));

        function updateLocation(location, name) {
          if (marker) marker.setMap(null);
          marker = new google.maps.Marker({ position: location, map: map });
          latElement.value = location.lat();
          lngElement.value = location.lng();
          nameElement.value = name;
        }
      }
    </script>
    
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCcNQibIa4J9Nc3aK_ZjCyPblBNYgFAUbM&libraries=places&callback=initMap" async defer></script>
  </body>
</html>