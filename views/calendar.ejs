<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>カレンダー表示</title>
  <link rel="stylesheet" href="/styles.css" />
</head>
<body>
  <header>
    <h1><a href="/dashboard">Limit Kakeibo</a></h1>
    <nav>
      <% if (user) { %>
        <div class="dropdown">
          <button class="dropdown-toggle">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="vertical-align: middle; margin-right: 8px;"><path d="M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z" fill="white"/></svg>
            <span><%= user.email %></span>
          </button>
          <div class="dropdown-content">
            <a href="/register">収入/支出登録</a>
            <a href="/map">支出マップ</a>
            <a href="/logout">ログアウト</a>
          </div>
        </div>
      <% } %>
    </nav>
    <p class="balance-display">
      <% if (balance && typeof balance.balance !== 'undefined') { %>
        現在の残高: <span class="amount"><%= balance.balance %></span> 円
        <span class="date">（<%= new Date(balance.updated_at).toLocaleString() %> 時点）</span>
      <% } else { %>
        現在の残高は登録されていません
      <% } %>
    </p>
  </header>

  <main>
    <%
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth();
      
      const allTransactions = [...paypays, ...comecomes];

      function isThisMonth(dateStr) { const d = new Date(dateStr); return d.getFullYear() === year && d.getMonth() === month; }
      function isIncome(t) { return t.type.includes('収入') || t.type.includes('入金') || t.type.includes('income') || t.type.includes('お小遣い') || t.type.includes('バイト'); }
      function isExpense(t) { return t.type.includes('支出') || t.type.includes('出金') || t.type.includes('expense') || t.type.includes('サブスク') || t.type.includes('単発'); }
      
      const monthTransactions = allTransactions.filter(t => isThisMonth(t.date));
      const incomeSum = monthTransactions.filter(isIncome).reduce((sum, t) => sum + Number(t.amount), 0);
      const expenseSum = monthTransactions.filter(isExpense).reduce((sum, t) => sum + Number(t.amount), 0);
      const diff = incomeSum - expenseSum;
    %>

    <section class="calendar-section">
      <form method="get" action="/dashboard">
        <label>年
          <select name="year">
            <% for(let y=2020; y<=2030; y++) { %>
              <option value="<%= y %>" <%= year === y ? 'selected' : '' %>><%= y %></option>
            <% } %>
          </select>
        </label>
        <label>月
          <select name="month">
            <% for(let m=1; m<=12; m++) { %>
              <option value="<%= m %>" <%= month + 1 === m ? 'selected' : '' %>><%= m %></option>
            <% } %>
          </select>
        </label>
        <button type="submit">表示</button>
      </form>

      <h2><%= year %>年 <%= month + 1 %>月 のカレンダー</h2>

      <div class="monthly-summary">
        <span style="margin-right:1.5em;">収入合計: <span class="amount income"><%= incomeSum %></span> 円</span>
        <span style="margin-right:1.5em;">支出合計: <span class="amount expense"><%= expenseSum %></span> 円</span>
        <span>差額: <span class="amount <%= diff >= 0 ? 'positive-diff' : 'negative-diff' %>"><%= diff %></span> 円</span>
      </div>

      <div class="calendar-grid">
        <% const daysOfWeek = ['日', '月', '火', '水', '木', '金', '土']; %>
        <% daysOfWeek.forEach(day => { %>
          <div class="calendar-cell header"><%= day %></div>
        <% }); %>

        <%
          const firstDay = new Date(year, month, 1);
          const lastDay = new Date(year, month + 1, 0);
          const numDays = lastDay.getDate();
          const startWeekday = firstDay.getDay();
          const totalCells = Math.ceil((startWeekday + numDays) / 7) * 7;
          let dayCounter = 1;
        %>

        <% for (let i = 0; i < totalCells; i++) { %>
          <% if (i < startWeekday || dayCounter > numDays) { %>
            <div class="calendar-cell empty"></div>
          <% } else {
              const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(dayCounter).padStart(2, '0')}`;
              const dayTransactions = allTransactions.filter(t => t.date && t.date.startsWith(dateStr));
              
              const incomeTotal = dayTransactions.filter(isIncome).reduce((sum, t) => sum + Number(t.amount), 0);
              const expenseTotal = dayTransactions.filter(isExpense).reduce((sum, t) => sum + Number(t.amount), 0);
          %>
            <div class="calendar-cell" data-date="<%= dateStr %>">
              <div class="date-number"><%= dayCounter %></div>
              <div class="daily-summary">
                <% if(incomeTotal > 0) { %><div class="income">＋<%= incomeTotal %>円</div><% } %>
                <% if(expenseTotal > 0) { %><div class="expense">－<%= expenseTotal %>円</div><% } %>
              </div>
            </div>
          <% dayCounter++; } %>
        <% } %>
      </div>
    </section>
  </main>
  <% if (aiComment) { %>
      <footer>
        <div class="ai-comment">
          <h3>今月のAIコメント</h3>
          <p><%= aiComment %></p>
        </div>
      </footer>
    <% } %>
  <div id="details-modal" class="modal-overlay" style="display: none;">
    <div class="modal-box">
      <button id="modal-close-btn" class="modal-close-btn">&times;</button>
      <h3 id="modal-date"></h3>
      <div id="modal-content">
        </div>
    </div>
  </div>
    <script>
    const dropdownToggle = document.querySelector('.dropdown-toggle');
    const dropdownContent = document.querySelector('.dropdown-content');
    if (dropdownToggle && dropdownContent) {
        dropdownToggle.addEventListener('click', function(event) {
        dropdownContent.classList.toggle('show');
        event.stopPropagation(); 
        });
        window.addEventListener('click', function(event) {
        if (dropdownContent.classList.contains('show')) {
            dropdownContent.classList.remove('show');
        }
        });
    }
  </script>
  <script>
    // ページ上のすべての取引データを取得
    // server.tsの修正により、各取引にsource_tableプロパティが含まれるようになりました。
    const allTransactionsForModal = <%- JSON.stringify([...paypays, ...comecomes]) %>;

    // 必要なHTML要素を取得
    const modal = document.getElementById('details-modal');
    const modalDate = document.getElementById('modal-date');
    const modalContent = document.getElementById('modal-content');
    const closeModalBtn = document.getElementById('modal-close-btn');
    const dayCells = document.querySelectorAll('.calendar-cell');

    // 各日付セルにクリックイベントを設定
    dayCells.forEach(cell => {
      cell.addEventListener('click', () => {
        const dateStr = cell.dataset.date; // クリックされた日付 (e.g., "2025-06-22")
        
        // その日の取引だけをフィルタリング
        const dailyTransactions = allTransactionsForModal.filter(t => t.date && t.date.startsWith(dateStr));

        // モーダルの日付タイトルを設定
        modalDate.textContent = `${new Date(dateStr).toLocaleDateString()} の詳細`;

        // モーダルの内容を生成
        modalContent.innerHTML = ''; // 一旦空にする
        if (dailyTransactions.length > 0) {
          dailyTransactions.forEach(tx => {
            const isExpense = tx.type.includes('支出') || tx.type.includes('expense') || tx.type.includes('サブスク') || tx.type.includes('単発');
            const displaySign = isExpense ? '－' : '＋';
            const displayAmount = Number(tx.amount).toLocaleString(); // 金額をカンマ区切りでフォーマット

            const transactionHtml = `
              <div class="modal-transaction">
                <div class="modal-transaction-header">
                  <span>${tx.description || tx.type}</span>
                  <span>${displaySign}${displayAmount} 円</span>
                </div>
                <div class="modal-transaction-body">
                  ${tx.photo_filename ? `<img src="/uploads/${tx.photo_filename}" class="modal-transaction-photo">` : ''}
                  <div>
                    ${tx.location_name ? `<p class="transaction-location">📍${tx.location_name}</p>` : ''}
                    <a href="/${tx.source_table === 'paypay' ? 'edit-paypay' : 'edit-comecome'}/${tx.id}">編集</a>
                   <a href="/${tx.source_table === 'paypay' ? 'delete-paypay' : 'delete-comecome'}/${tx.id}" onclick="return confirm('本当に削除しますか？');" style="color: #d9534f;">削除</a>
                  </div>
                </div>
              </div>
            `;
            modalContent.innerHTML += transactionHtml;
          });
        } else {
          modalContent.innerHTML = '<p>この日の収入/支出はありません。</p>';
        }

        // モーダルを表示
        modal.style.display = 'flex';
      });
    });

    // モーダルを閉じる処理
    function closeModal() {
      modal.style.display = 'none';
    }

    closeModalBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', (event) => {
      // 背景の黒い部分をクリックしたときだけ閉じる
      if (event.target === modal) {
        closeModal();
      }
    });
  </script>
</body>
</html>