<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>場所の地図</title>
  
  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCcNQibIa4J9Nc3aK_ZjCyPblBNYgFAUbM&callback=initMap"></script>
  
  <link rel="stylesheet" href="/styles.css"/>

  <style>
    /* bodyとhtmlの高さを100%にする */
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        font-family: Arial, sans-serif;
    }

    /* main要素にFlexboxを適用し、ヘッダー下の残りの高さを占める */
    main {
        display: flex; /* Flexboxを使って子要素を横並びにする */
        height: calc(100vh - 60px); /* headerの高さに合わせて calc() の値を調整してください (例: headerの高さが60pxなら - 60px) */
        overflow: hidden; /* はみ出した内容を隠す */
        margin-top: 0; /* mainがheaderのすぐ下にくるように */
    }

    /* 地図コンテナがmainの幅と高さを占める */
    #map-container {
        flex: 2; /* mainの幅の約2/3を占める */
        height: 100%; /* 親 (main) の高さ全体を使う */
        display: flex; /* h2と地図を縦に並べるため */
        flex-direction: column;
        padding-right: 10px; /* リストとの間に少しスペースを設ける */
    }

    #map-container h2 {
        text-align: center;
        margin-bottom: 10px;
    }

    /* 地図本体のdiv */
    #map {
        height: 100%; /* 親コンテナ (map-container) の残りの高さ全体を使う */
        width: 100%;
    }

    /* 新しく追加する場所リストのコンテナ */
    #location-list-container {
        flex: 1; /* mainの幅の約1/3を占める */
        height: 100%;
        display: flex;
        flex-direction: column;
        border-left: 1px solid #ccc; /* 地図との区切り線 */
        padding-left: 10px;
        box-sizing: border-box; /* paddingを含めて幅を計算 */
        overflow-y: auto; /* 内容が多すぎる場合にスクロール可能にする */
    }

    #location-list-container h2 {
        text-align: center;
        margin-bottom: 10px;
    }

    #location-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    #location-list li {
        background-color: #f9f9f9;
        margin-bottom: 8px;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer; /* クリック可能であることを示す */
        transition: background-color 0.2s ease;
    }

    #location-list li:hover {
        background-color: #e9e9e9;
    }

    #location-list li h3 {
        margin: 0 0 5px 0;
        font-size: 1.1em;
        color: #333;
    }

    #location-list li p {
        margin: 0;
        font-size: 0.9em;
        color: #666;
    }

    /* ランキングコンテナは不要なため、CSS定義も削除 */
    /* もしHTMLに残り、非表示にしたい場合は以下を追加: */
    #ranking-container {
      display: none; 
    }
    
    /* 追加: AIコメントのスタイル */
    .ai-comment-map {
      text-align: center;
      margin: 15px auto; /* 中央寄せのため左右をautoに */
      padding: 20px; /* パディングを増やす */
      background-color:white; /* 非常に薄い緑色 */
      border-radius: 12px; /* 角をさらに丸く */
      /* border: 1px solid #c8e6c9;  任意で薄い緑のボーダーを追加 */
      color: #388e3c; /* 濃い緑のテキスト */
      font-size: 1.1em; /* フォントサイズを少し大きく */
      font-style: normal; /* イタリック体から標準に戻す */
      box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* シャドウを強める */
      max-width: 80%; /* 最大幅を設定して中央寄せ効果を出す */
      line-height: 1.6; /* 行の高さを調整 */
    }

    /* ここにあった .info-window-image のCSS定義は削除しました。
       代わりに /styles.css で定義されている .modal-transaction-photo を使用します。
       もし /styles.css に定義がなければ、以下の内容を /styles.css に追加してください。
       
       .modal-transaction-photo {
         max-width: 100px;
         max-height: 100px;
         margin-top: 10px;
         border-radius: 5px;
         object-fit: cover;
       }
    */
  </style>
</head>
<body>
  <header>
    <h1><a href="/dashboard">Limit Kakeibo</a></h1>
    <nav class="top-nav">
      <ul style="list-style: none; padding: 0; margin: 0;">
        <li><a href="/dashboard">カレンダー</a></li>
        <li><a href="/register">収入/支出登録</a></li>
        <li><a href="/map">支出マップ</a></li>
        <li><a href="/logout">ログアウト</a></li>
      </ul>      
      <% if (user) { %>
        <div class="user-info">
          <svg width="24" height="24" ...>...</svg>
          <span><%= user.email %></span>
        </div>
      <% } %>
    </nav>
  </header>

  <main>
    <div id="map-container">
      <h2>支出マップ</h2>
      <% if (aiCommentForMap) { %>
        <p class="ai-comment-map"><%= aiCommentForMap %></p>
      <% } %>
      <div id="map"></div>
    </div>
    
    <div id="location-list-container">
      <h2>支出場所一覧</h2>
      <ul id="location-list">
        </ul>
    </div>
  </main>

  <script>
    let map; // Google Mapオブジェクトをグローバルに定義
    const markers = []; // マーカーオブジェクトを格納する配列を追加
    const infoWindows = []; // 情報ウィンドウオブジェクトを格納する配列を追加

    // 地図の初期化関数 (Google Maps APIのcallbackで呼び出される)
    function initMap() {
      // 地図の初期化と中心座標、ズームレベルの設定
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 35.681236, lng: 139.767125 }, // 例: 東京駅周辺の緯度経度
        zoom: 13,
      });

      let transactions = <%- JSON.stringify(transactions) %>;
      
      // 支出の取引のみをフィルタリングし、金額の降順でソート
      const expenseTransactions = transactions.filter(tx => {
        return tx.type.includes('支出') || tx.type.includes('expense') || tx.type.includes('サブスク') || tx.type.includes('単発');
      });

      expenseTransactions.sort((a, b) => b.amount - a.amount); // 金額の高い順にソート

      const locationList = document.getElementById('location-list'); // 場所リストのUL要素を取得
      
      expenseTransactions.forEach((tx, index) => { // ソートされた配列をループ
        if (tx.latitude && tx.longitude) { // 緯度と経度が存在する場合のみ
          const marker = new google.maps.Marker({
            position: { lat: tx.latitude, lng: tx.longitude },
            map: map,
            title: tx.location_name || '場所不明'
          });
          markers.push(marker); // マーカーを配列に保存

          // 情報ウィンドウのコンテンツを構築
          const displayAmount = `${Math.abs(tx.amount).toLocaleString()} 円`; 
          let photoHtml = '';

          // 写真のファイル名がある場合のみ画像タグを生成
          if (tx.photo_filename) {
            // 画像のパスは 'public/uploads' の下に保存されていると仮定
            // Expressのstaticミドルウェアにより '/uploads/ファイル名' でアクセス可能
            // クラス名をカレンダーと同じ 'modal-transaction-photo' に変更
            photoHtml = `<img src="/uploads/${tx.photo_filename}" class="modal-transaction-photo" alt="取引写真"/>`;
          }

          const infoWindowContent = `
            <div>
              <h3>${tx.location_name || '場所不明'}</h3>
              <p>${tx.description || tx.type}: ${displayAmount}</p>
              ${photoHtml}
            </div>
          `;
          const infoWindow = new google.maps.InfoWindow({
            content: infoWindowContent
          });
          infoWindows.push(infoWindow); // 情報ウィンドウを配列に保存

          // マーカーをクリックしたときに情報ウィンドウを表示
          marker.addListener('click', () => {
            // 他の情報ウィンドウを閉じる
            infoWindows.forEach(iw => iw.close());
            infoWindow.open(map, marker);
          });

          // 場所リストのアイテムを作成
          const listItem = document.createElement('li');
          listItem.innerHTML = `
            <h3>${tx.location_name || '場所不明'}</h3>
            <p>${tx.description || tx.type}: <span style="font-weight: bold;">${displayAmount}</span></p>
          `;
          locationList.appendChild(listItem);

          // リストアイテムがクリックされたときに、対応するマーカーの情報ウィンドウを開く
          listItem.addEventListener('click', () => {
            // 他の情報ウィンドウを閉じる
            infoWindows.forEach(iw => iw.close());
            infoWindow.open(map, marker);
            map.setCenter(marker.getPosition()); // 地図の中心をマーカーに移動
            map.setZoom(15); // 少しズームする
          });
        }
      });
    } // End of initMap function

    // ドロップダウンメニューのJavaScript (既存のものをコピー)
    const dropdownToggle = document.querySelector('.dropdown-toggle');
    const dropdownContent = document.querySelector('.dropdown-content');
    if (dropdownToggle && dropdownContent) {
        dropdownToggle.addEventListener('click', function(event) {
        dropdownContent.classList.toggle('show');
        event.stopPropagation(); 
        });
        window.addEventListener('click', function(event) {
        if (dropdownContent.classList.contains('show')) {
            dropdownContent.classList.remove('show');
        }
        });
    }
  </script>
</body>
</html>